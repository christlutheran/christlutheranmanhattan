---
import type { NavItem } from '../lib/navigation';
import NavLink from './NavLink.astro';

interface Props {
  item: NavItem;
  isActive: boolean;
  target?: string;
}

const { item, isActive, target } = Astro.props;
const dropdownId = `dropdown-${item.title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`;
---

<div class="relative group h-full flex items-center" data-dropdown="true">
  <button
    aria-haspopup="true"
    aria-expanded="false"
    aria-controls={dropdownId}
    data-dropdown-button
    class:list={[
      "flex items-center gap-1 font-cinzel text-white/90 hover:text-liturgical-gold transition-colors tracking-wide text-sm h-full",
      { "text-liturgical-gold font-medium": isActive }
    ]}
  >
    {item.title}
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>
  
  <div id={dropdownId} data-dropdown-menu class="invisible group-hover:visible opacity-0 group-hover:opacity-100 absolute left-0 top-full mt-1 min-w-[200px] w-max bg-liturgical-red rounded-lg shadow-lg border border-white/10 overflow-hidden transition-all duration-200 ease-in-out">
    <div class="relative">
      <div class="absolute inset-0 bg-gradient-to-b from-white/5 to-black/10"></div>
      <div class="relative py-1">
        {item.children?.map(child => (
          <NavLink
            href={child.path}
            isActive={isActive}
            target={target}
            class="block px-4 py-2 hover:bg-white/5 w-full text-left whitespace-normal break-words"
          >
            {child.title}
          </NavLink>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  (function () {
    const scripts = document.getElementsByTagName('script');
    const current = scripts[scripts.length - 1];
    const container = current?.previousElementSibling;
    if (!(container instanceof HTMLElement) || container.dataset.dropdown !== 'true') return;

    const btn = container.querySelector('[data-dropdown-button]');
    const menu = container.querySelector('[data-dropdown-menu]');
    if (!(btn instanceof HTMLElement) || !(menu instanceof HTMLElement)) return;

    const setExpanded = (val) => btn.setAttribute('aria-expanded', String(val));

    container.addEventListener('mouseenter', () => setExpanded(true));
    container.addEventListener('mouseleave', () => setExpanded(false));

    btn.addEventListener('focus', () => setExpanded(true));
    btn.addEventListener('blur', () => setExpanded(false));

    menu.addEventListener('focusin', () => setExpanded(true));
    menu.addEventListener('focusout', () => {
      setTimeout(() => {
        const active = document.activeElement;
        if (active && !container.contains(active)) setExpanded(false);
      }, 0);
    });

    btn.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        setExpanded(false);
        btn.blur();
      }
    });
  })();
</script>
