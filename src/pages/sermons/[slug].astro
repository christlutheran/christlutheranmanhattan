---
import { getEntryBySlug, getCollection } from 'astro:content';
import PageLayout from '../../layouts/PageLayout.astro';

function formatSermonDate(dateInput) {
  let date;
  if (dateInput instanceof Date) {
    date = dateInput;
  } else if (typeof dateInput === 'string') {
    // Parse as UTC
    const [year, month, day] = dateInput.split('-').map(Number);
    date = new Date(Date.UTC(year, month - 1, day));
  } else {
    return '';
  }
  const dayNum = date.getUTCDate();
  const daySuffix = (d) => {
    if (d > 3 && d < 21) return 'th';
    switch (d % 10) {
      case 1: return 'st';
      case 2: return 'nd';
      case 3: return 'rd';
      default: return 'th';
    }
  };
  return date.toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    timeZone: 'UTC',
  }).replace(/(\d{1,2})(,)/, (m, d, c) => `${d}${daySuffix(Number(d))}${c}`);
}

export async function getStaticPaths() {
  const sermons = await getCollection('sermons');
  return sermons.map((sermon) => ({ params: { slug: sermon.slug } }));
}

const { slug } = Astro.params;
const sermon = await getEntryBySlug('sermons', slug);
if (!sermon) {
  throw new Error('Sermon not found');
}
const { Content } = await sermon.render();

const siteUrl = Astro.site ? Astro.site.toString() : '';
const canonicalUrl = siteUrl ? `${siteUrl}/sermons/${sermon.data.slug}/` : undefined;
const metaDescription = sermon.data.title + (sermon.data.series ? ` | ${sermon.data.series}` : '') + ' - Sermon at Christ Lutheran Church, Manhattan, KS.';
---
<PageLayout title={sermon.data.title} description={sermon.data.description}>
  <Fragment slot="head">
    <meta name="description" content={metaDescription} />
    <meta property="og:title" content={`${sermon.data.title} | Christ Lutheran Church Manhattan KS`} />
    <meta property="og:description" content={metaDescription} />
    <meta property="og:type" content="article" />
    {canonicalUrl && <link rel="canonical" href={canonicalUrl} />}
    <meta name="robots" content="index, follow" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={`${sermon.data.title} | Christ Lutheran Church Manhattan KS`} />
    <meta name="twitter:description" content={metaDescription} />
    <script type="application/ld+json">{JSON.stringify({
      '@context': 'https://schema.org',
      '@type': 'Sermon',
      name: sermon.data.title,
      description: metaDescription,
      url: canonicalUrl,
      datePublished: sermon.data.date instanceof Date ? sermon.data.date.toISOString().split('T')[0] : sermon.data.date,
      author: sermon.data.preacher || sermon.data.pastor || 'Unknown',
      about: sermon.data.series || undefined,
      text: undefined,
    })}</script>
  </Fragment>
  <section class="py-4 bg-white text-liturgical-black">
    <div class="container mx-auto px-4 max-w-3xl">
      <div class="mb-2 text-sm text-liturgical-burgundy">{formatSermonDate(sermon.data.date)}</div>
      <div class="mb-2 text-sm text-liturgical-black">Pastor: {sermon.data.pastor}</div>
      {sermon.data.series && <div class="mb-2 text-xs text-liturgical-gold">Series: {sermon.data.series}</div>}
      {sermon.data.scripture && <div class="mb-4 text-xs text-liturgical-black">Text: {sermon.data.scripture}</div>}
      <article class="prose prose-lg max-w-none">
        <Content />
      </article>
      <div class="mt-8">
        <a href="/sermons" class="text-liturgical-red hover:underline font-cinzel">‚Üê Back to Sermons</a>
      </div>
    </div>
  </section>
</PageLayout>
